<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canvas_width = 255; canvas_height = 255;

hue = 0; sat = 255; val = 0;

edit_position = false;

canvas = surface_create(canvas_width,canvas_height);

if(surface_exists(canvas)){
    surface_set_target(canvas);
        draw_set_color(make_color_hsv(hue,255,255));
            draw_rectangle(0,0,canvas_width,canvas_height,0);
        draw_set_color(c_black);
    surface_reset_target();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(mouse_check_button_pressed(mb_left)){
    // if initially pressed inside
    if(mouse_x &gt; x &amp;&amp; mouse_x &lt; x + canvas_width &amp;&amp; mouse_y &gt; y &amp;&amp; mouse_y &lt; y + canvas_height){
        edit_position = true; // if mouse clicked within the bounds of the color picker box
    }
}

if(edit_position){

    if(window_get_cursor() != cr_none){
        window_set_cursor(cr_none);
        cursor_sprite = scp_sprite_thumb;
    }

    if(mouse_check_button(mb_left)){ // if mouse is inside of the box with mouse left held
    
        sat = mouse_x - x; // update positions
        val = mouse_y - y;
        
    }
    

    if(mouse_check_button_released(mb_left)){
        edit_position = false;
    }
    
    // if the mouse is pressed outside of the box limit it to the confines of the box
    if(mouse_x &lt; x){
        sat = 0;
        //sat = 0;
    }
    if(mouse_y &lt; y){
        val = 0;
    }
    if(mouse_x &gt; x + canvas_width){
        sat = canvas_width;
    }
    if(mouse_y &gt; y + canvas_height){
        val = canvas_height;
    }
     
} else {
    if(window_get_cursor() == cr_none){
        window_set_cursor(cr_default);
        cursor_sprite = -1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// draw the canvas with the applied shader
if(surface_exists(canvas)){ // check surface exists
    surface_set_target(canvas);
        draw_set_color(make_color_hsv(hue,255,255));
            draw_rectangle(0,0,canvas_width,canvas_height,0); // draw a solid square of the current hue to modify using the scp_shader_huebox shader
        draw_set_color(c_black);
    surface_reset_target();
    
    shader_set(scp_shader_huebox);
        draw_surface(canvas,x,y);
    shader_reset();
} else {
    canvas = surface_create(canvas_width, canvas_height); // if surface doesn't exist (due to a change in screen modes for example) then create it.
}

draw_sprite(scp_sprite_thumb,0,x+sat,y+val); // draw the thumb tack

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
