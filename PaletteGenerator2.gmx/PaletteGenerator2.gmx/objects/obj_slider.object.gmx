<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Slider Properties
//General
width=100;
height=15;
value_min=0;
value_max=1;
value=0;
value_old=0;
value_font=fnt_arial_small;
value_changed=false;

is_enabled=true;
is_rounded=true;
round_value=1;

bg_sprite=noone;

//Title
title_font=fnt_arial;
title_color=$dddddd;
title="Title";
title_visible=true;
title_xoff=0;
title_yoff=2;
title_underlined=true;

//Nudge buttons
nudge_buttons_visible=true;
nudge_buttons_sprite=spr_nudge;
nudge_buttons_amount=1;
nudge_buttons_margin=5;
nudge_left_moused_over=false;
nudge_right_moused_over=false;

//Slider
slider_sprite=spr_slider;
slider_width=width-sprite_get_width(spr_slider)*2-nudge_buttons_margin*2;
slider_yoff=2;
slider_position=0;
slider_margin_hori=0;
slider_margin_vert=4;

//Moused Over
is_moused_over=false;
mouse_over_width=2;

//Held
is_held=false;
held_width=2;




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update Value
value=lerp(value_min,value_max,slider_position);
if(is_rounded)
    value=round_n(value,round_value);
    
if(value != value_old)
{
    value_changed=true;
    value_old=value;
}
else
    value_changed=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Calculate width based on Nudge Buttons Visibility
if(nudge_buttons_visible)
{
    slider_margin_hori=sprite_get_width(slider_sprite)+nudge_buttons_margin;
    slider_width=width-slider_margin_hori*2;
}
else
{
    slider_width=width;
    slider_margin_hori=0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mouse Controls for Bar
if(is_enabled)
{
    if(mouse_x &gt; x+slider_margin_hori &amp;&amp; 
       mouse_x &lt; x+slider_margin_hori+slider_width &amp;&amp; 
       mouse_y &gt; y-slider_margin_vert &amp;&amp; 
       mouse_y &lt; y+height+slider_margin_vert)
    {
        if(mouse_check_button_pressed(mb_left))
            is_held=true;
        else if(mouse_check_button_pressed(mb_right))
        {
            slider_value_set(id,get_integer("Set new value.",value))
        }
        else if(mouse_wheel_up())
        {
            var _val=value+nudge_buttons_amount;
            _val=clamp(_val,value_min,value_max);
            slider_value_set(id,_val);
        }
        else if(mouse_wheel_down())
        {
            var _val=value-nudge_buttons_amount;
            _val=clamp(_val,value_min,value_max);
            slider_value_set(id,_val);
        }
    }
    else
    {
        is_moused_over=false;
    }
    
    if(is_held)
    {
        var _pos= mouse_x-x-slider_margin_hori;
        _pos=clamp(_pos,0,slider_width);
        slider_position=lerp(0,1, _pos/(slider_width))
    }
    
    if(is_held &amp;&amp; mouse_check_button_released(mb_left))
            is_held=false;
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mouse Controls for Nudge
if(is_enabled &amp;&amp; nudge_buttons_visible)
{
    //Left Nudge
    if(window_mouse_get_x() &gt; x &amp;&amp; 
       window_mouse_get_x() &lt; x+sprite_get_width(nudge_buttons_sprite) &amp;&amp; 
       window_mouse_get_y() &gt; y-slider_margin_vert &amp;&amp; 
       window_mouse_get_y() &lt; y+height+slider_margin_vert)
    {
        if(mouse_check_button_pressed(mb_left))
        {   //Decrease Value
            var _val=value-nudge_buttons_amount;
            _val=clamp(_val,value_min,value_max);
            slider_value_set(id,_val);
        }
        else if(mouse_check_button_pressed(mb_right))
        {
            value_in=get_integer("Set a new min value.",value_min);
            slider_value_set(id,value);
        }
        else
        {
            nudge_left_moused_over=true;
        }
    }
    else
    {
        nudge_left_moused_over=false;
    }
    
    //Right Nudge
    if(window_mouse_get_x() &gt; x+width-sprite_get_width(nudge_buttons_sprite) &amp;&amp; 
       window_mouse_get_x() &lt; x+width &amp;&amp; 
       window_mouse_get_y() &gt; y-slider_margin_vert &amp;&amp; 
       window_mouse_get_y() &lt; y+height+slider_margin_vert)
    {
        if(mouse_check_button_pressed(mb_left))
        {   //Increase Value
            var _val=value+nudge_buttons_amount;
            _val=clamp(_val,value_min,value_max);
            slider_value_set(id,_val);
        }
        else if(mouse_check_button_pressed(mb_right))
        {
            value_max=get_integer("Set a new max value.",value_max);
            slider_value_set(id,value);
        }
        else
        {
            nudge_right_moused_over=true;
        }
    }
    else
    {
        nudge_right_moused_over=false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Bar
if(!is_enabled)
    exit;
var _slider_position=lerp(x+slider_margin_hori,x+slider_margin_hori+slider_width,slider_position)

//Bar Background
if(bg_sprite == noone)
    draw_rectangle_color(x+slider_margin_hori,y,x+slider_margin_hori+slider_width,y+height,c_dkgray,c_dkgray,c_gray,c_gray,false);
else
{
    var _tex=sprite_get_texture(bg_sprite,0);
    draw_primitive_begin_texture(pr_trianglestrip,_tex);
    draw_vertex_texture(x+slider_margin_hori,y,0,0);
    draw_vertex_texture(x+slider_margin_hori+slider_width,y,1,0);
    draw_vertex_texture(x+slider_margin_hori,y+height,0,1);
    draw_vertex_texture(x+slider_margin_hori+slider_width,y+height,1,1);
    
    draw_primitive_end();
}

if(is_enabled)
{
    //draw_set_color(merge_color(c_aqua,c_navy,.5));
    
    //draw_rectangle(x+slider_margin_hori,y,_slider_position,y+height,false);
    if(is_held)
    {
        draw_set_color($75d9bc);
        draw_rectangle(x+slider_margin_hori,y,x+slider_margin_hori+slider_width,y+height,true);
    }
    else if(is_moused_over)
    {
        draw_set_color(c_white);
        draw_rectangle(x+slider_margin_hori,y,x+slider_margin_hori+slider_width,y+height,true);
    }
    else
    {
        //Outline
        draw_set_color($dddddd);
        draw_rectangle(x+slider_margin_hori,y,x+slider_margin_hori+slider_width,y+height,true);
    }
    draw_sprite(spr_slider,0,_slider_position,y+height);
}


draw_set_text_alignment(3,c_white);
draw_set_font(value_font);
draw_text(x+slider_margin_hori+slider_width,y-2,string(value)); //x+width*.5
                
                           
//draw_title
if(title_visible)
{
    draw_set_font(title_font);
    draw_set_text_alignment(1,title_color);
    draw_text(x+title_xoff,y-title_yoff,title);
    if(title_underlined)
    {
        draw_set_color(title_color);
        draw_line(x+title_xoff,y-title_yoff-1,x+title_xoff+width,y-title_yoff-1);
    }
}

//debug rectangle
/*draw_set_color(c_red)
draw_rectangle(x,y,x+width,y+height,true);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Nudge Buttons
if(nudge_buttons_visible)
{
    if(is_enabled)
    {
        if(nudge_left_moused_over)
        {
            d3d_set_fog(true,c_aqua,0,1);
            for(var i=0;i&lt;9;i++)
            {                
                draw_sprite_ext(nudge_buttons_sprite,
                    0,
                    x+lengthdir_x(1,45*i),
                    y+lengthdir_y(1,45*i)+height*.5,
                    1,1,0,c_white,.5+(.5*is_enabled));
                
            }
            d3d_set_fog(false,c_aqua,0,1);
        }
        else if(nudge_right_moused_over)
        {
            d3d_set_fog(true,c_aqua,0,1);
            for(var i=0;i&lt;9;i++)
            {                
                draw_sprite_ext(nudge_buttons_sprite,
                    0,
                    x+width+lengthdir_x(1,45*i),
                    y+lengthdir_y(1,45*i)+height*.5,
                    -1,1,0,c_white,.5+(.5*is_enabled));
                
            }
            d3d_set_fog(false,c_aqua,0,1);
        }
    }
    
    draw_sprite_ext(nudge_buttons_sprite,
                    0,
                    x,
                    y+height*.5,
                    1,1,0,c_white,.5+(.5*is_enabled));
    draw_sprite_ext(nudge_buttons_sprite,
                    0,
                    x+width,
                    y+height*.5,
                    -1,1,0,c_white,.5+(.5*is_enabled));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>5,8</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
