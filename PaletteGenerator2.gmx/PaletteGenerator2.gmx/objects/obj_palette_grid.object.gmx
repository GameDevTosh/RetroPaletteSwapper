<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Properties
globalvar Mouse_Over_ID;
Mouse_Over_ID=-1;
mover_color=$75d9bc;
select_color=$d5c281;
left=12;
top=131;
width=576;
height=576;
col_width=width/16;
col_height=height/16;
margin=7;
last_selected=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Look for Clicks
if(point_in_rectangle(mouse_x,mouse_y,x,y,x+width,y+height))
{
    ///Find the current moused over column.
    var _column = clamp(floor(lerp(0,16,(mouse_x-x)/width)),0,15);

    //Find the row
    var _row = clamp(floor(lerp(0,16,(mouse_y-y)/height)),0,15);
    
    Mouse_Over_ID=_column+(_row*16);
    /*draw_set_text_alignment(7);
    draw_text(x,y,"Column: "+string(_column) +
                +"#Row: "+string(_row)
                +"#Selected: "+string(_column+(_row*16))
                );*/
    if(mouse_check_button_pressed(mb_left))
    {
        if(keyboard_check(vk_control))
        {   //Multi Select-Individual
            set_selected(Mouse_Over_ID);
            last_selected=Mouse_Over_ID;
        }
        else if(keyboard_check(vk_shift))
        {   //Multi Select - Length
            if(Mouse_Over_ID&gt;last_selected)
            {
                for(var i=last_selected; i&lt;=Mouse_Over_ID;i++)
                {
                    set_selected(i,true);       
                }
            }
            else
            {
                for(var i=last_selected; i&gt;=Mouse_Over_ID;i--)
                {
                    set_selected(i,true);       
                }
            }
            last_selected=Mouse_Over_ID;
        }
        else
        {   //Single Select
            clear_selection();
            set_selected(Mouse_Over_ID);    
            last_selected=Mouse_Over_ID;
        }
    }
}   
else
    Mouse_Over_ID=-1; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Colors
var _x=left;
var _y=top;

var _row=0;
var _grid = ds_list_find_value(Palettes,Current_Pal);
for(var i=0;i&lt;ds_grid_height(_grid);i++)
{
    var _x1,_x2,_y1,_y2;
    if(i!= 0 &amp;&amp; i mod 16 == 0)
    {
        _x=left;
        _y+=col_height;
        _row++;
    }
    
    //Draw Selection
    if(_grid[# Pal_Cols.Is_Selected,i])
    {
        draw_set_color(select_color);
        _x1=_x;
        _x2=_x+col_width;
        _y1=_y;
        _y2=_y+col_width;
        draw_rectangle(_x1,_y1,_x2,_y2,false);
    }
    
    //Draw Mouse Over
    if(Mouse_Over_ID == i)
    {
        draw_set_color(mover_color);
        _x1=_x;
        _x2=_x+col_width;
        _y1=_y;
        _y2=_y+col_width;
        draw_rectangle(_x1,_y1,_x2,_y2,true);
        draw_rectangle(_x1+1,_y1+1,_x2-1,_y2-1,true);
    }

    
    //Draw Color Square
    var _col = _grid[# Pal_Cols.Color,i];
    draw_set_color(_col);
    
    
    _x1=_x+margin;
    _x2=_x+col_width-margin;
    _y1=_y+margin;
    _y2=_y+col_height-margin;
    
    draw_rectangle(_x1,_y1,_x2,_y2,false);
    _x+=col_width;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Text
draw_set_text_alignment(5,$dddddd);

//Current Pal
var _x = 150
var _y = 109;
if(Current_Pal==0)
    draw_text(_x,_y,"BASE");
else
    draw_text(_x,_y,Current_Pal);
    

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
