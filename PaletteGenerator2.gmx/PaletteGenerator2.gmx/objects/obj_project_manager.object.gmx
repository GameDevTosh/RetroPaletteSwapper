<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check that shader compiled properly
if(!shader_is_compiled(shd_pal_swapper))
{
    show_message("The shader failed to load properly.  Not sure why.");
    game_end();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Properties
globalvar ProjectDirty,Preview_BG_Color,File_Path;
File_Path="";
ProjectDirty=false;
Preview_BG_Color=$75d9bc;

project_name="New Project.pal";

pal_swap_init_system(shd_pal_swapper);
window_width=window_get_width();
window_height=window_get_height();
display_set_gui_size(window_width,window_height);
window_scale=1;

global.SettingsFile = "settings.sav";
global.SettingsMap = ds_map_create();
if(!file_exists(global.SettingsFile))
{
 global.SettingsMap[? "App Background"]=background_color;
 global.SettingsMap[? "Window Scale"]=window_scale;
 ds_map_secure_save(global.SettingsMap,global.SettingsFile); 
}
else
{
  global.SettingsMap = ds_map_secure_load(global.SettingsFile);
  background_color = global.SettingsMap[? "App Background"];
  window_scale=global.SettingsMap[? "Window Scale"];
  if(window_scale == undefined) window_scale = 1;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Palette Grid
globalvar Pal_Grid, Unique_Colors, Palettes, Current_Pal, Pal_Surface, Highlight_Color;
Highlight_Color=c_white;
Current_Pal=0;
Unique_Colors=ds_list_create();
Palettes=ds_list_create();
enum Pal_Cols{
    Is_Selected,
    Is_Moused_Over,
    Color,
    Hue,
    Saturation,
    Value,
    New_Color,
    New_Hue,
    New_Saturation,
    New_Value,
    Count};

Pal_Grid=ds_grid_create(Pal_Cols.Count,0);
ds_list_add(Palettes,Pal_Grid);

///Setup base palette sprite
Pal_Surface =surface_create(1,1);
surface_set_target(Pal_Surface)
draw_clear_alpha(c_black,1);
surface_reset_target();

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprite Handling
globalvar Sprite_List;
Sprite_List=ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Color Sliders
globalvar Hue_Slider, Val_Slider, Sat_Slider;
build_color_sliders();
hide_color_sliders(true);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///New Project Init
is_initilized=false;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set window size
window_set_size(window_width*window_scale,window_height*window_scale);
alarm[0]=1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>window_center();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update header with project name and if dirty.
var _cap = project_name;
if(project_get_dirty())
    _cap+="*";
window_set_caption(_cap);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Listen for changes on the slider.
if(Hue_Slider.is_enabled &amp;&amp; Current_Pal != 0)
{
    if(selected_count_get() == 1)
    {   //Update selected row's new values.
        if(Hue_Slider.value_changed || 
           Val_Slider.value_changed ||
           Sat_Slider.value_changed)
        {
            //show_debug_message("Updating Colors");
            //sliders_set_changed(false);
            var _grid=current_palette_get_grid();
            var _row=selected_color_get_row();
            var _hue = Hue_Slider.value;
            var _sat = Sat_Slider.value;
            var _val = Val_Slider.value;
            var _col = make_color_hsv(_hue,_sat,_val);
            _grid[# Pal_Cols.New_Color,_row]=_col;
            _grid[# Pal_Cols.New_Hue,_row]=_hue;
            _grid[# Pal_Cols.New_Saturation,_row]=_sat;
            _grid[# Pal_Cols.New_Value,_row]=_val;
            rebuild_palette_sprite();
        }
    }
    else
    {   //Update all selected rows 
        if(Hue_Slider.value_changed || 
           Val_Slider.value_changed ||
           Sat_Slider.value_changed)
        {
            var _grid=current_palette_get_grid();
            for(var _i=0;_i&lt;ds_grid_height(_grid);_i++)
            {
                if(_grid[# Pal_Cols.Is_Selected,_i])
                {
                    var _hue = Hue_Slider.value;
                    var _sat = Sat_Slider.value;
                    var _val = Val_Slider.value;
                    
                    _grid[# Pal_Cols.New_Hue,_i] = wrap(_grid[# Pal_Cols.Hue,_i]+_hue,0,256);
                    _grid[# Pal_Cols.New_Saturation,_i]=clamp(_grid[# Pal_Cols.Saturation,_i]+_sat,0,255);
                    _grid[# Pal_Cols.New_Value,_i]=clamp(_grid[# Pal_Cols.Value,_i]+_val,0,255);
                    
                    var _col = make_color_hsv(_grid[# Pal_Cols.New_Hue,_i],_grid[# Pal_Cols.New_Saturation,_i],_grid[# Pal_Cols.New_Value,_i]);
                    _grid[# Pal_Cols.New_Color,_i]=_col;
                    
                    rebuild_palette_sprite();
                }
            }
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initilize
if(!is_initilized)
{
    is_initilized=true;
    /*
    //Disable all groups
    with(obj_button)
        is_enabled=false;
        
    with(obj_button)
    {
        if(group == "App Toolbar" &amp;&amp; name != "Save Project")
            is_enabled=true;
    }*/
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Resize Window
if(keyboard_check_pressed(ord("Z")))
{
    var _inc = .5;
    if(window_width*(window_scale+_inc) &gt; display_get_width() ||
       window_height*(window_scale+_inc) &gt; display_get_height())
       window_scale=1;
    else 
        window_scale+=_inc;
    window_set_size(window_width*window_scale,window_height*window_scale)
    alarm[0]=1;
    global.SettingsMap[? "Window Scale"]=window_scale;
    ds_map_secure_save(global.SettingsMap,global.SettingsFile); 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug: Draw Palette Sprite
/*if(!surface_exists(Pal_Surface))
    rebuild_palette_sprite();
draw_surface_ext(Pal_Surface,0,0,1,1,0,c_white,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="88">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>button_export_images_with_current_palette</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="67">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>button_crush_palette</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
