<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Properties
texture_set_interpolation(false);
width=442;
height=580;
x=824;
y=127;
x_off=20;
y_off=20;
zoom=1;
zoom_x=0;
zoom_y=0;
zoom_in=false;
current_sprite=0;

mouse_x_previous=mouse_x;
mouse_y_previous=mouse_y;
dragging = false;

highlight_surface=noone;
highlight_pulse=0;
highlight_speed=.25;

is_playing=false;
play_frame=0;
play_speed=.3;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controls
if(point_in_rectangle(mouse_x,mouse_y,x,y,x+width,y+height) &amp;&amp; 
   obj_bg_color_picker.my_color_picker==noone &amp;&amp; 
   obj_highlight_color_picker.my_color_picker==noone &amp;&amp;
   !ds_list_empty(Sprite_List))
{   //Moused Over
    //ZOOOOOOOM
    if(!mouse_check_button(mb_left) 
        &amp;&amp; (mouse_wheel_up() || mouse_wheel_down()))
    {
      zoom_x=mouse_x;
      zoom_y=mouse_y;
      zoom_in=mouse_wheel_up();
      event_user(0);
    }
    
    ///Drag
    if(mouse_check_button_pressed(mb_left))
    {
        dragging=true;
        mouse_x_previous=mouse_x;
        mouse_y_previous=mouse_y;
    }
    if(dragging &amp;&amp; mouse_check_button(mb_left) &amp;&amp; point_in_rectangle(mouse_x_previous,mouse_y_previous,x,y,x+width,y+height))
    {
        x_off+=mouse_x-mouse_x_previous;
        y_off+=mouse_y-mouse_y_previous;
        mouse_x_previous=mouse_x;
        mouse_y_previous=mouse_y;   
    }
    else
    {
      dragging=false;
    }
    if(mouse_check_button(mb_right))
    {
        x_off=0;
        y_off=0;
        zoom=1;
    }
}

///Play
if(is_playing)
{
  play_frame=wrap(play_frame+play_speed,0,ds_list_size(Sprite_List));
  current_sprite = floor(play_frame);
}
else
  current_sprite=floor(current_sprite);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var _w =sprite_get_width(ds_list_find_value(Sprite_List,current_sprite));
var _h =sprite_get_height(ds_list_find_value(Sprite_List,current_sprite));
      
var _mx = zoom_x-x-x_off;
var _my = zoom_y-y-y_off;
var _mouse_x = _mx/(_w*zoom);
var _mouse_y = _my/(_h*zoom);
      
var _mult=1;   
if(keyboard_check(vk_shift))
    _mult=10;
if(!zoom_in)
    zoom=max(min_zoom,zoom-.1*_mult);
else
    zoom=zoom+.1*_mult;

x_off = zoom_x-x-(_w*zoom*_mouse_x);
y_off = zoom_y-y-(_h*zoom*_mouse_y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*draw_text(x+10,y+10,"#X: "+string(mouse_x)+
                    "#Y: "+string(mouse_y)+
                    "#ZoomX: "+string(zoom_x)+
                    "#ZoomY: "+string(zoom_y)
                    );  
draw_set_color(c_white);
draw_circle(zoom_x,zoom_y,3,true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(ds_list_size(Sprite_List)&gt;0 &amp;&amp; sprite_exists(ds_list_find_value(Sprite_List,floor(current_sprite))))
{
    var _surf=surface_create(width,height);
    surface_set_target(_surf);
    {
        draw_clear_alpha(Preview_BG_Color,1);
        if(!surface_exists(Pal_Surface))
            rebuild_palette_sprite();
            
        if(keyboard_check(vk_alt) &amp;&amp; Mouse_Over_ID != -1)
        {
            if(surface_exists(highlight_surface))
                surface_free(highlight_surface);
            highlight_surface=surface_create(3,ds_grid_height(Pal_Grid));
            surface_set_target(highlight_surface)
                draw_surface_part(Pal_Surface,0,0,1,ds_grid_height(Pal_Grid),0,0);
                draw_surface_part(Pal_Surface,Current_Pal,0,1,ds_grid_height(Pal_Grid),1,0);
                draw_surface_part(Pal_Surface,Current_Pal,0,1,ds_grid_height(Pal_Grid),2,0);
                draw_set_color(Highlight_Color);
                draw_point(2,Mouse_Over_ID);
            surface_reset_target();
            
            //Pulse
            highlight_pulse+=highlight_speed;
            
            pal_swap_set(shd_pal_swapper,highlight_surface,clamp(sin(highlight_pulse)+1.5,1,2),true);
                draw_sprite_ext(ds_list_find_value(Sprite_List,floor(current_sprite)),0,x_off,y_off,zoom,zoom,0,c_white,1)
            pal_swap_reset();
        }
        else if(keyboard_check(vk_space) &amp;&amp; selected_count_get()&gt;0)
        {
            if(surface_exists(highlight_surface))
                surface_free(highlight_surface);
            highlight_surface=surface_create(3,ds_grid_height(Pal_Grid));
            surface_set_target(highlight_surface)
                draw_surface_part(Pal_Surface,0,0,1,ds_grid_height(Pal_Grid),0,0);
                draw_surface_part(Pal_Surface,Current_Pal,0,1,ds_grid_height(Pal_Grid),1,0);
                draw_surface_part(Pal_Surface,Current_Pal,0,1,ds_grid_height(Pal_Grid),2,0);
                draw_set_color(Highlight_Color);
                for(var i=0; i&lt;ds_grid_height(Pal_Grid);i++)
                {
                    if(Pal_Grid[# Pal_Cols.Is_Selected,i])
                    {
                        draw_point(2,i);
                    }
                }
            surface_reset_target();
            
            //Pulse
            highlight_pulse+=highlight_speed;
            
            pal_swap_set(shd_pal_swapper,highlight_surface,clamp(sin(highlight_pulse)+1.5,1,2),true);
                draw_sprite_ext(ds_list_find_value(Sprite_List,floor(current_sprite)),0,x_off,y_off,zoom,zoom,0,c_white,1)
            pal_swap_reset();
        }
        else
        {   
            highlight_pulse=0;
            pal_swap_set(shd_pal_swapper,Pal_Surface,Current_Pal,true);
                draw_sprite_ext(ds_list_find_value(Sprite_List,floor(current_sprite)),0,x_off,y_off,zoom,zoom,0,c_white,1)
            pal_swap_reset();
        }
    }
    surface_reset_target();
    draw_surface(_surf,x,y);
    surface_free(_surf);
}

draw_set_text_alignment(6,$dddddd);
draw_set_font(fnt_arial);
//Draw Zoom
var _y=107;
var _x=1242;
draw_text(_x,_y,string(zoom)+"X");
var _x=1087;
draw_text(_x,_y,string(floor(current_sprite)));



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
